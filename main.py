def archiver(text: str) -> str:
    """
    Функция-архиватор, которая принимает на вход строку произвольной длины,
    а на выход выдает другую строку меньшей длины.
    После уточнения задания решил, что строка НЕ должна содержать цифры.
    Алгоритм ищет повторяющиеся символы в строке, объединяет их в один и добавляет к строке число повторений.

    :param text: Строка, не содержащая цифр.
    :return: Сжатая строка.
    """

    # Проверка на пустую строку
    if not text:
        return ''

    chars_list = []  # Временный список для хранения символов, чтобы постоянно не делать конкатенацию строк
    temp_char = text[0]  # Переменная принимает значение первого символа строки. Необходима для алгоритма
    counter = 1  # Счётчик повтора подряд идущих символов в строке

    if any(char.isdigit() for char in text):  # Проверка на содержание цифр в строке
        raise ValueError('Строка не должна содержать цифр')

    # Реализация алгоритма
    for i in range(1, len(text)):  # Перебор символов в строке
        if text[i] == text[i - 1]:  # Проверка на повторяющийся символ
            counter += 1
        else:
            # Проверка на наличие хотя бы двух повторяющихся символов в строке
            if counter > 1:
                chars_list.append(f'{temp_char}{counter}')  # Добавление в список символа с числом повторений
            else:
                chars_list.append(temp_char)  # Добавление в список только символа
            temp_char = text[i]  # Переменная принимает значение текущего символа
            counter = 1  # Счётчик "обнуляется" (объединивается)

    # Повторная проверка для последнего символа
    if counter > 1:
        chars_list.append(f'{temp_char}{counter}')
    else:
        chars_list.append(temp_char)

    result = ''.join(chars_list)  # Объединение списка в строку
    return result  # Возвращение строки


def unpacker(text: str) -> str:
    """
    Функция-разархивирования, которая принимает на вход "сжатую" строку,
    а на выходе возвращает исходную строку без потерь.
    Исходная строка НЕ содержит числа.
    Алгоритм перебирает строку и ищет в ней числа, после чего

    :param text: Сжатая строка
    :return: Исходная строка, не содержащая цифр.
    """

    # Проверка на пустую строку
    if not text:
        return ''

    chars_list = []  # Временный список для хранения символов
    temp_char = text[0]  # Переменная принимает значение первого символа строки
    start, end = 0, 0  # Указатели для числа повторений в строке. Необходимо, если число (двух-, трёх- и т.д.) значное

    # Реализация алгоритма
    for i in range(1, len(text)):  # Перебор символов в строке
        if text[i].isdigit():  # Проверка, является ли символ цифрой
            if start <= end:  # Проверка, НЕ находится ли указатель start правее end
                start = i
        else:
            if start > end:  # Проверка, находится ли указатель start правее end
                end = i  # Присваивание значение указателя end текущего индекса
                # Добавление в список строки символа в количестве, указанном в числе после него
                chars_list.append(f'{temp_char * int(text[start:end])}')
            else:
                chars_list.append(temp_char)  # Добавление в список только символа
            temp_char = text[i]

    # Повторная проверка для последнего символа
    if start > end:
        chars_list.append(f'{temp_char * int(text[start:])}')
    else:
        chars_list.append(temp_char)

    result = ''.join(chars_list)
    return result


def main():
    text = 'erdccce...'
    print(unpacker('a12'))


if __name__ == "__main__":
    main()
